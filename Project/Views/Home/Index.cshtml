@model IEnumerable<Project.Models.Entities.Patient>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>MedLink is your patient management portal!</p>
</div>

<h1>Patients</h1>
<button type="button" class="btn btn-primary" onclick="showAddPatientModal()">Add patient</button>

<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Date of birth
            </th>
            <th>
                Sex
            </th>
            <th>
                Address
            </th>
            <th>
                Contact number
            </th>
            <th>
                Emergency contact
            </th>
            <th>
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfBirth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sex)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContactNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EmergencyContact)
                </td>
                <td>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Medical History" onclick="showMedicalHistoryModal(this)" data-patient-id="@item.PatientId" data-medical-history='@Json.Serialize(item.MedicalHistories)'>
                        <i class="bi bi-journal-medical"></i>
                    </button>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Bills"><i class="bi bi-receipt-cutoff"></i></button>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Insurances"><i class="bi bi-shield-check"></i></button>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Patient Tests"><i class="bi bi-card-list"></i></button>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Appointments"><i class="bi bi-calendar-event"></i></button>
                    <button class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Current Illness"><i class="bi bi-exclamation-circle"></i></button>
                    <button class="btn btn-success" onclick="showEditPatientModal(@item.PatientId, '@item.Name', '@item.DateOfBirth', '@item.Sex', '@item.Address', '@item.ContactNumber', '@item.EmergencyContact')"><i class="bi bi-pencil"></i></button>
                    <button class="btn btn-danger" onclick="showDeletePatientModal(@item.PatientId, '@item.Name')"><i class="bi bi-x"></i></button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal" id="addPatientModal" style="display:none; position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); z-index: 1000;">
    <div class="modal-content" style="background-color: #fefefe; margin: auto; padding: 20px; width: 40%;">
        <h4>Add Patient</h4>
        <form id="addPatientForm">
            <div class="form-group">
                <label for="patientName">Name</label>
                <input type="text" class="form-control" id="patientName" required>
            </div>
            <!-- Add other patient fields similarly -->
            <button type="button" id="savePatient">Save</button>
        </form>
    </div>
</div>



<script>
    function showAddPatientModal() {
        Swal.fire({
            title: 'Add Patient',
            html: `
                <form id="addPatientForm">
                    <div class="form-group">
                        <label for="swal-input1">Name</label>
                        <input type="text" id="swal-input1" class="swal2-input" placeholder="John Doe">
                    </div>
                    <div class="form-group">
                        <label for="swal-input3">Date of birth</label>
                        <input type="date" id="swal-input3" class="swal2-input">
                    </div>
                    <div class="form-group">
                        <label for="swal-input4">Sex</label>
                        <select id="swal-input4" class="swal2-input">
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="swal-input5">Address</label>
                        <input type="text" id="swal-input5" class="swal2-input" placeholder="123 Main St">
                    </div>
                    <div class="form-group">
                        <label for="swal-input6">Contact Number</label>
                        <input type="tel" id="swal-input6" class="swal2-input" placeholder="(123) 456-7890">
                    </div>
                    <div class="form-group">
                        <label for="swal-input7">Emergency Number</label>
                        <input type="tel" id="swal-input7" class="swal2-input" placeholder="(123) 456-7890">
                    </div>
                </form>
            `,
            focusConfirm: false,
            preConfirm: () => {
                return {
                    name: document.getElementById('swal-input1').value,
                    dateOfBirth: document.getElementById('swal-input3').value,
                    sex: document.getElementById('swal-input4').value,
                    address: document.getElementById('swal-input5').value,
                    contactNumber: document.getElementById('swal-input6').value,
                    emergencyContact: document.getElementById('swal-input7').value
                }
            }
        }).then(result => {
            if (result.isConfirmed) {
                var patientData = result.value;

                $.ajax({
                    url: "https://localhost:7219/addpatient",
                    type: "POST",
                    data: JSON.stringify(patientData),
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'Patient has been added, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error adding the patient.', 'error');
                    }
                });
            }
        });
    }

    function showMedicalHistoryModal(btn) {
        var medicalHistories = JSON.parse(btn.getAttribute('data-medical-history'));
        var patientId = btn.getAttribute('data-patient-id');

        // Check if medicalHistories is empty
        var historyTable;
        if (!medicalHistories.length) {
            historyTable = 'No medical histories available for this patient.';
        } else {
            historyTable = `<table class='table'>
                            <thead>
                                <tr>
                                    <th>Disease Name</th>
                                    <th>Date Diagnosed</th>
                                    <th>Treatment</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>`;

            for (var history of medicalHistories) {
                historyTable += `<tr>
                                    <td>${history.diseaseName}</td>
                                    <td>${new Date(history.dateDiagnosed).toLocaleDateString()}</td>
                                    <td>${history.treatment}</td>
                                    <td>
                                        <button class="btn btn-success" onclick="showEditMedicalHistoryModal(${history.medicalHistoryId}, ${patientId}, '${history.diseaseName}', '${history.dateDiagnosed}', '${history.treatment}')"><i class="bi bi-pencil"></i></button>
                                        <button class="btn btn-danger" onclick="showDeleteMedicalHistoryModal(${history.medicalHistoryId}, '${history.diseaseName}')"><i class="bi bi-x-lg"></i></button>
                                    </td>
                                 </tr>`;
            }

            historyTable += `</tbody></table>`;
        }


        Swal.fire({
            title: 'Medical History',
            html: historyTable,
            width: '60%',
            customClass: {
                content: 'text-left'
            },
            showCancelButton: true,
            confirmButtonText: 'Add Medical History',
            showConfirmButton: true,
            cancelButtonText: 'Close'
        }).then((result) => {
            if (result.isConfirmed) {
                showAddMedicalHistoryModal(patientId);
            }
        });
    }

    function showAddMedicalHistoryModal(patientId) {
        Swal.fire({
            title: 'Add Medical History',
            html: `
                <input type="text" id="diseaseName" class="swal2-input" placeholder="Disease Name">
                <input type="date" id="dateDiagnosed" class="swal2-input">
                <input type="text" id="treatment" class="swal2-input" placeholder="Treatment">
            `,
            confirmButtonText: 'Add',
            focusConfirm: false,
            preConfirm: () => {
                return {
                    patientId: patientId,
                    diseaseName: document.getElementById('diseaseName').value,
                    dateDiagnosed: document.getElementById('dateDiagnosed').value,
                    treatment: document.getElementById('treatment').value
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                var historyData = result.value;

                $.ajax({
                    url: "https://localhost:7219/addmedicalhistory",
                    type: "POST",
                    data: JSON.stringify(historyData),
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'The history has been added, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error adding the history.', 'error');
                    }
                });
            }
        });
    }

    function showEditMedicalHistoryModal(medicalHistoryId, patientId, diseaseName, dateDiagnosed, treatment) {
        Swal.fire({
            title: 'Edit Medical History',
            html: `
            <input type="text" id="editDiseaseName" class="swal2-input" placeholder="Disease Name" value="${diseaseName}">
            <input type="date" id="editDateDiagnosed" class="swal2-input" placeholder="Date Diagnosed" value="${new Date(dateDiagnosed).toISOString().split('T')[0]}">
            <input type="text" id="editTreatment" class="swal2-input" placeholder="Treatment" value="${treatment}">`,
            showCancelButton: true,
            confirmButtonText: 'Update',
            cancelButtonText: 'Cancel',
            preConfirm: () => {
                return {
                    medicalHistoryId: medicalHistoryId,
                    patientId: patientId,
                    diseaseName: document.getElementById('editDiseaseName').value,
                    dateDiagnosed: document.getElementById('editDateDiagnosed').value,
                    treatment: document.getElementById('editTreatment').value
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                var historyData = result.value;

                $.ajax({
                    url: "https://localhost:7219/editmedicalhistory",
                    type: "PUT",
                    data: JSON.stringify(historyData),
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'The history has been edited, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error editing the history.', 'error');
                    }
                });
            }
        });
    }

    function showDeleteMedicalHistoryModal(medicalHistoryId, diseaseName) {
        Swal.fire({
            title: 'Confirm Deletion',
            text: `Are you sure you want to delete the history for ${diseaseName}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Delete',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "https://localhost:7219/deletemedicalhistory" + "/" + medicalHistoryId,
                    type: "DELETE",
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'The history has been deleted, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error deleting the history.', 'error');
                    }
                });
            }
        });
    }

    function showEditPatientModal(patientId, name, dateOfBirth, sex, address, contactNumber, emergencyContact) {
        Swal.fire({
            title: 'Edit Patient Details',
            html: `
            <input type="text" id="editName" class="swal2-input" placeholder="Name" value="${name}">
            <input type="date" id="editDateOfBirth" class="swal2-input" placeholder="Date of Birth" value="${new Date(dateOfBirth).toISOString().split('T')[0]}">
            <select id="editSex" class="swal2-input">
                <option value="Male" ${sex === 'Male' ? 'selected' : ''}>Male</option>
                <option value="Female" ${sex === 'Female' ? 'selected' : ''}>Female</option>
            </select>
            <input type="text" id="editAddress" class="swal2-input" placeholder="Address" value="${address}">
            <input type="text" id="editContactNumber" class="swal2-input" placeholder="Contact Number" value="${contactNumber}">
            <input type="text" id="editEmergencyContact" class="swal2-input" placeholder="Emergency Contact" value="${emergencyContact}">`,
            showCancelButton: true,
            confirmButtonText: 'Update',
            cancelButtonText: 'Cancel',
            preConfirm: () => {
                return {
                    patientId: patientId,
                    name: document.getElementById('editName').value,
                    dateOfBirth: document.getElementById('editDateOfBirth').value,
                    sex: document.getElementById('editSex').value,
                    address: document.getElementById('editAddress').value,
                    contactNumber: document.getElementById('editContactNumber').value,
                    emergencyContact: document.getElementById('editEmergencyContact').value
                };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                var patientData = result.value;

                $.ajax({
                    url: "https://localhost:7219/editpatient",
                    type: "PUT",
                    data: JSON.stringify(patientData),
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'The patient details have been edited, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error editing the patient details.', 'error');
                    }
                });
            }
        });
    }

    function showDeletePatientModal(patientId, name) {
        Swal.fire({
            title: 'Confirm Deletion',
            text: `Are you sure you want to delete the patient for ${name}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Delete',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "https://localhost:7219/deletepatient" + "/" + patientId,
                    type: "DELETE",
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire('Saved!', 'The patient has been deleted, the page will be reloaded in 3 seconds!', 'success');
                        setTimeout(function () {
                            location.reload()
                        }, 3000);

                    },
                    error: function (error) {
                        Swal.fire('Error!', 'There was an error deleting the patient.', 'error');
                    }
                });
            }
        });
    }
</script>